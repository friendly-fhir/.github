# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Release

on:
  workflow_call:
    inputs:
      go-version-file:
        type: string
        description: |
          The path to the go version file.
          Default: go.mod
        default: go.mod
        required: false
      snapshot:
        type: boolean
        description: |
          Whether or not to create a snapshot release.
          Default: false
        default: true
        required: false
      token:
        type: string
        description: The GitHub authorization token to use for the release.
        default: ${{ github.token }}
        required: false
      workdir:
        type: string
        description: The working directory to use for the release.
        default: dist
        required: false
      artifact-name:
        type: string
        description: |
          The name to use for the generated artifact. This may be used by
          downstream workflows to reference the artifact.
          Default: release-assets
        default: release-assets
        required: false
      attest-provenance:
        type: boolean
        description: |
          Whether or not to attest the provenance of the release.
          Default: true
        default: true
        required: false

    outputs:
      release-artifact-id:
        description: The artifact ID of the uploaded release
        value: ${{ jobs.release.outputs.artifact-id }}
      release-artifact-url:
        description: The URL of the uploaded release
        value: ${{ jobs.release.outputs.artifact-url }}
      release-artifact-name:
        description: The name of the uploaded release
        value: ${{ jobs.release.outputs.artifact-name }}

permissions:
  # Required to write the release artifacts
  contents: write

  # Required for producing attestation statements
  attestations: write

  # Required for modifying the token
  id-token: write

jobs:
  release:
    name: Release ${{ github.ref_name }}
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.create-jobs.outputs.jobs }}
      project-name: ${{ steps.metadata.outputs.project-name }}
      artifact-id: ${{ steps.release-artifact.outputs.artifact-id }}
      artifact-url: ${{ steps.release-artifact.outputs.artifact-url }}
      artifact-name: ${{ inputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{inputs.go-version-file}}

      - name: Setup CyloneDX-Gomod
        uses: ./actions/golang/setup-cyclonedx-gomod
        with:
          version: latest

      - name: Create Release
        if: ${{ !inputs.snapshot }}
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: "~> v1"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Snapshot Release
        if: ${{ inputs.snapshot }}
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: "~> v1"
          args: release --clean --snapshot
          workdir: "${{inputs.workdir}}"

      - name: Read metadata
        id: metadata
        run: |
          project_name=$(cat "${{inputs.workdir}}/metadata.json" | jq -r '.project_name')
          echo "project-name=${project_name}" >> "${GITHUB_OUTPUT}"

      # The created artifacts contain both directories that have the binaries
      # as well as archives that contain the same content. Remove the duplicate
      # directories.
      #
      # Additionally, the generated config.yaml file may contain substitutions
      # which can potentially leak information about the certificates that will
      # be used for code-signing in the future.
      - name: Clean up Release
        run: |
          find dist -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} \;
          rm -f ${{inputs.workdir}}/{config.yaml,checksums.txt,artifacts.json,metadata.json}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        id: release-artifact
        with:
          name: ${{inputs.artifact-name}}
          path: ${{inputs.workdir}}/${{steps.metadata.outputs.project-name}}_*
          retention-days: 7

      - name: Create Attestation Jobs
        id: create-jobs
        run: |
          output=$(find dist -type f -exec basename {} \; | sed 's@\.tar\.gz@@g' | sed 's@\.bom.json@@g' | sed 's@\.zip@@g' | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "jobs=${output}" >> "${GITHUB_OUTPUT}"

  # The actions/attest API doesn't make it easy to attest SBOM provenance and
  # associate it with a specific build if it's being globbed. An unfortunate
  # consequence of that is that the only way to do this is to unroll the
  # attestation so that it's done individually per step. This either means
  # itemizing it N times, which is ugly -- or to use a matrix strategy to
  # attest them all; which is easier to maintain, but requires downloading the
  # created artifact. It's not ideal, but it's better than nothing.
  attest:
    name: Attest Provenance
    if: ${{ inputs.attest-provenance }}
    runs-on: ubuntu-latest
    needs: [release]
    strategy:
      matrix:
        job: ${{ fromJson(needs.release.outputs.jobs) }}
    steps:
      - name: Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.release.outputs.artifact-name }}

      - name: Unarchive Assets
        id: unarchive
        run: |
          if [[ -f "${{ matrix.job }}.zip" ]]; then
            unzip -q "${{ matrix.job }}.zip"
            echo "extension=.exe" >> "${GITHUB_OUTPUT}"
          fi
          if [[ -f "${{ matrix.job }}.tar.gz" ]]; then
            tar -xzf "${{ matrix.job }}.tar.gz"
            echo "extension=" >> "${GITHUB_OUTPUT}"
          fi
          # Massage the name into something a bit easier to read
          name=$(echo "${{ matrix.job }}" | sed "s@_@-@g" | sed "s@x86-64@x86_64@g")
          name=$(echo "${name}" | sed "s@-SNAPSHOT@@g")
          echo "subject-name=${name}" >> "${GITHUB_OUTPUT}"

      - name: Attest SBOM provenance
        id: sbom
        uses: actions/attest-sbom/predicate@v1
        with:
          sbom-path: '${{ matrix.job }}.bom.json'

      - name: Attest build provenance
        uses: actions/attest@v1
        with:
          subject-path: "${{ needs.release.outputs.project-name }}${{ steps.unarchive.outputs.extension }}"
          subject-name: "${{ steps.unarchive.outputs.subject-name }}"
          predicate-type: ${{ steps.sbom.outputs.predicate-type }}
          predicate-path: ${{ steps.sbom.outputs.predicate-path }}
