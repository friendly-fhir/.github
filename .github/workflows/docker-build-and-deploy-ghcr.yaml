# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Deploy Docker Container (GHCR)

on:
  workflow_call:
    inputs:
      image-name:
        description: The name of the image.
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      app-id:
        description: |
          The ID of the GitHub App to use for authentication.
          If unspecified, the user will be the actor.
        required: false
        type: string
      app-private-key:
        description: |
          The private key of the GitHub App to use for authentication.
          If unspecified, the password will be the github.token -- and must be
          a token with packages: write permissions.
        required: false
        type: string
      dockerfile:
        description: |
          The path to the Dockerfile to build.
          If unspecified, defaults to 'Dockerfile' in the root of the repository.
        required: false
        default: Dockerfile
        type: string
      dry-run:
        description: |
          If true, the workflow will not push the image to the registry.
        required: false
        default: false
        type: boolean
      path:
        description: |
          The path to build. This corresponds to the <path> argument in 'docker build'.
          If unspecified, defaults to '.'
        required: false
        type: string
        default: '.'
    outputs:
      image-id:
        description: The name of the image that was built.
        value: ${{ jobs.deploy.outputs.image-id }}
      version:
        description: The version of the image that was built.
        value: ${{ jobs.deploy.outputs.version }}
      tagged-image-id:
        description: The fully qualified image id that was built.
        value: ${{ jobs.deploy.outputs.tagged-image-id }}

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    name: Deploy to Container Registry
    runs-on: ubuntu-latest

    outputs:
      image-id: ${{ steps.image.outputs.id }}
      version: ${{ steps.tag.outputs.version }}
      tagged-image-id: ${{ steps.image.outputs.id }}:${{ steps.tag.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate GitHub App
        id: authenticate
        if: ${{ inputs.app-id && inputs.app-private-key }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ inputs.app-id }}
          private-key: ${{ inputs.app-private-key }}

      - name: Select Token
        id: select
        run: |
          if [[ -n "${{ inputs.app-id }}" && -n "${{ inputs.app-private-key }}" ]]; then
            echo "token=${{ steps.authenticate.outputs.token }}" >> "${GITHUB_OUTPUT}"
          else
            echo "token=${{ github.token }}" >> "${GITHUB_OUTPUT}"
          fi

      - name: Determine image
        id: image
        run: |
          echo "id=ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}" >> "${GITHUB_OUTPUT}"

      - name: Determine tag
        id: tag
        run: |
          # Extract ref prefix for versions and cut the 'v' prefix
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            version=$(echo $version | sed -e 's/^v//')
          elif [[ "${{ github.ref }}" == "refs/heads/${{ github.event.repository.default_branch }}" ]]; then
            version=latest
          else
            version=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          fi

          echo "version=${version}" >> "${GITHUB_OUTPUT}"

      - name: Login to Registry
        id: login
        run: |
          docker login ghcr.io                                                 \
            --username ${{ github.actor }}                                     \
            --password ${{ steps.select.outputs.token }}

      - name: Build Docker Image
        run: |
          url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          repo=${{ github.event.repository.name }}
          owner=${{ github.repository_owner }}
          timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          docker build                                                         \
            --file ${{ inputs.dockerfile }}                                    \
            --tag ${{ inputs.image-name }}                                     \
            --label "org.friendly-fhir.run.number=${{ github.run_number }}"    \
            --label "org.friendly-fhir.run.attempt=${{ github.run_attempt }}"  \
            --label "org.friendly-fhir.run.actor=${{ github.actor }}"          \
            --label "org.friendly-fhir.run.event=${{ github.event_name }}"     \
            --label "org.friendly-fhir.run=${{ github.run_id }}"               \
            --label "org.friendly-fhir.source.sha=${{ github.sha }}"           \
            --label "org.friendly-fhir.source.ref=${{ github.ref }}"           \
            --label "org.friendly-fhir.source.repo=${repo}"                    \
            --label "org.friendly-fhir.source.owner=${owner}"                  \
            --label "org.friendly-fhir.source=${url}"                          \
            --label "org.friendly-fhir.build-time=${timestamp}"                \
            ${{ inputs.path }}

      - name: Tag created build
        run: |
          docker tag ${{ inputs.image-name }} ${{ steps.image.outputs.id }}:${{ steps.tag.outputs.version }}

      - name: Push Docker Image
        if: ${{ !inputs.dry-run }}
        run: |
          docker push "${{ steps.image.outputs.id }}:${{ steps.tag.outputs.version }}"
